[{"C:\\Proyectos\\test-personalidad\\src\\index.js":"1","C:\\Proyectos\\test-personalidad\\src\\App.js":"2","C:\\Proyectos\\test-personalidad\\src\\registerServiceWorker.js":"3","C:\\Proyectos\\test-personalidad\\src\\components\\utils\\_var.js":"4","C:\\Proyectos\\test-personalidad\\src\\components\\Question.js":"5","C:\\Proyectos\\test-personalidad\\src\\components\\Intro.js":"6","C:\\Proyectos\\test-personalidad\\src\\components\\utils\\Cards.js":"7","C:\\Proyectos\\test-personalidad\\src\\components\\utils\\Buttons.js":"8","C:\\Proyectos\\test-personalidad\\src\\components\\quiz\\Quiz.js":"9","C:\\Proyectos\\test-personalidad\\src\\components\\result\\Results.js":"10","C:\\Proyectos\\test-personalidad\\src\\components\\utils\\_media-queries.js":"11","C:\\Proyectos\\test-personalidad\\src\\api\\quizQuestions.js":"12","C:\\Proyectos\\test-personalidad\\src\\components\\quiz\\QuestionCount.js":"13","C:\\Proyectos\\test-personalidad\\src\\components\\quiz\\Question.js":"14","C:\\Proyectos\\test-personalidad\\src\\components\\quiz\\AnswerOption.js":"15","C:\\Proyectos\\test-personalidad\\src\\components\\result\\Letters.js":"16","C:\\Proyectos\\test-personalidad\\src\\components\\result\\Colors.js":"17","C:\\Proyectos\\test-personalidad\\src\\components\\result\\Briggs.js":"18","C:\\Proyectos\\test-personalidad\\src\\components\\utils\\ResultWrapper.js":"19","C:\\Proyectos\\test-personalidad\\src\\components\\definitions\\LettersDef.js":"20","C:\\Proyectos\\test-personalidad\\src\\components\\definitions\\BriggsDef.js":"21","C:\\Proyectos\\test-personalidad\\src\\components\\definitions\\ColorsDef.js":"22"},{"size":461,"mtime":1610092232209,"results":"23","hashOfConfig":"24"},{"size":1065,"mtime":1610069035194,"results":"25","hashOfConfig":"24"},{"size":4022,"mtime":1515091738000,"results":"26","hashOfConfig":"24"},{"size":239,"mtime":1515091738000,"results":"27","hashOfConfig":"24"},{"size":7114,"mtime":1610069010068,"results":"28","hashOfConfig":"24"},{"size":1783,"mtime":1610086388880,"results":"29","hashOfConfig":"24"},{"size":3340,"mtime":1515091738000,"results":"30","hashOfConfig":"24"},{"size":2366,"mtime":1610093151007,"results":"31","hashOfConfig":"24"},{"size":1737,"mtime":1610090529003,"results":"32","hashOfConfig":"24"},{"size":1823,"mtime":1610093849085,"results":"33","hashOfConfig":"24"},{"size":589,"mtime":1515091738000,"results":"34","hashOfConfig":"24"},{"size":14525,"mtime":1610086292935,"results":"35","hashOfConfig":"24"},{"size":1097,"mtime":1610092323343,"results":"36","hashOfConfig":"24"},{"size":641,"mtime":1610090503644,"results":"37","hashOfConfig":"24"},{"size":1865,"mtime":1610090477649,"results":"38","hashOfConfig":"24"},{"size":4841,"mtime":1610093419794,"results":"39","hashOfConfig":"24"},{"size":5364,"mtime":1610091867727,"results":"40","hashOfConfig":"24"},{"size":12729,"mtime":1610090551563,"results":"41","hashOfConfig":"24"},{"size":1760,"mtime":1610093697205,"results":"42","hashOfConfig":"24"},{"size":1752,"mtime":1515091738000,"results":"43","hashOfConfig":"24"},{"size":6089,"mtime":1515091738000,"results":"44","hashOfConfig":"24"},{"size":1754,"mtime":1515091738000,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"ysinu6",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\Proyectos\\test-personalidad\\src\\index.js",["92"],"C:\\Proyectos\\test-personalidad\\src\\App.js",[],["93","94"],"C:\\Proyectos\\test-personalidad\\src\\registerServiceWorker.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\utils\\_var.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\Question.js",["95"],"import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { colors } from '../components/utils/_var'\nimport Quiz from '../components/quiz/Quiz'\nimport Results from '../components/result/Results'\nimport quizQuestions from '../api/quizQuestions'\nimport { QuestionCard } from '../components/utils/Cards'\n\nconst Wrapper = styled.div`\n  position: fixed;\n  min-height: 100%;\n  max-width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  background: ${colors.$colorBg};\n`\n\nclass Question extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {\n        Colors: {\n          Green: 10,\n          Brown: 10,\n          Blue: 10,\n          Red: 10\n        },\n        Letters: {\n          A: 10,\n          B: 10,\n          C: 10,\n          D: 10\n        },\n        Briggs: {\n          E: 5,\n          I: 5,\n          S: 5,\n          N: 5,\n          T: 5,\n          F: 5,\n          J: 5,\n          P: 5\n        }\n      },\n      resultBriggs: '',\n      resultColors: '',\n      resultLetters: ''\n    }\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this)\n  }\n\n  \n  componentWillMount() {\n    const answerOptions = quizQuestions.map(question => question.answers)\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: answerOptions[0]\n    })\n  }\n\n  // configurando la respuesta segun el usuario\n  setUserAnswer(answer) {\n    const answersCount = this.state.answersCount\n    let applyAnswer = answer => {\n      const answer_array = answer.split(',')\n      let briggsAnswer = answer_array[0]\n      let colorsAnswer = answer_array[1]\n      let lettersAnswer = answer_array[2]\n      if (answer_array.length === 3) {\n        answersCount['Briggs'][briggsAnswer] += 1\n        answersCount['Colors'][colorsAnswer] += 1\n        answersCount['Letters'][lettersAnswer] += 1\n      } else if (answer_array.length === 4) {\n        answersCount['Briggs'][briggsAnswer] -= 1\n        answersCount['Colors'][colorsAnswer] -= 1\n        answersCount['Letters'][lettersAnswer] -= 1\n      }\n      return answersCount\n    }\n    this.setState({\n      answersCount: applyAnswer(answer),\n      answer: answer\n    })\n  }\n\n  // incrementar el contador y el estado de questionID\n  setNextQuestion() {\n    const counter = this.state.counter + 1\n    const questionId = this.state.questionId + 1\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    })\n  }\n\n  // ajustando respeusta y siguiente pregunta\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value)\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 800)\n    } else {\n      setTimeout(() => this.setResults(this.getColorsResults(), this.getLettersResults(), this.getBriggsResults()), 800)\n    }\n  }\n\n  // ===========================================================================\n  //                        obtener resultados\n  // ===========================================================================\n  getBriggsResults() {\n    const answerCount = this.state.answersCount\n    const briggsAnswer = answerCount['Briggs']\n    const answersCountKeysBriggs = Object.keys(briggsAnswer)\n    const answersCountValuesBriggs = answersCountKeysBriggs.map(key => briggsAnswer[key])\n    let briggsType = ''\n    if (briggsAnswer.E >= briggsAnswer.I) {\n      briggsType += 'E'\n    } else briggsType += 'I'\n    if (briggsAnswer.S >= briggsAnswer.N) {\n      briggsType += 'S'\n    } else briggsType += 'N'\n    if (briggsAnswer.T >= briggsAnswer.F) {\n      briggsType += 'T'\n    } else briggsType += 'F'\n    if (briggsAnswer.J >= briggsAnswer.P) {\n      briggsType += 'J'\n    } else briggsType += 'P'\n    return briggsType\n  }\n\n  getColorsResults() {\n    const answersCount = this.state.answersCount\n    const colorsAnswer = answersCount['Colors']\n    const answersCountKeysColors = Object.keys(colorsAnswer)\n    const answersCountValuesColors = answersCountKeysColors.map(key => colorsAnswer[key])\n    const maxAnswerCountColors = Math.max.apply(null, answersCountValuesColors)\n    return answersCountKeysColors.filter(key => colorsAnswer[key] === maxAnswerCountColors)\n  }\n\n  getLettersResults() {\n    const answersCount = this.state.answersCount\n    const lettersAnswer = answersCount['Letters']\n    const answersCountKeysLetters = Object.keys(lettersAnswer)\n    const answersCountValuesLetters = answersCountKeysLetters.map(key => lettersAnswer[key])\n    const maxAnswerCountLetters = Math.max.apply(null, answersCountValuesLetters)\n    return answersCountKeysLetters.filter(key => lettersAnswer[key] === maxAnswerCountLetters)\n  }\n\n  // ===========================================================================\n  //                        set resultados\n  // ===========================================================================\n  setResults(resultColors, resultLetters, resultBriggs) {\n    if (resultColors.length >= 1) {\n      this.setState({ resultColors: resultColors[0] })\n    }\n    if (resultLetters.length >= 1) {\n      this.setState({ resultLetters: resultLetters[0] })\n    }\n    if (resultBriggs.length >= 1) {\n      this.setState({ resultBriggs: resultBriggs })\n    }\n  }\n\n  // ===========================================================================\n  //                    funciones para renderizar el quiz\n  // ===========================================================================\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    )\n  }\n\n  // ===========================================================================\n  //                    funciones para renderizar el resultado\n  // ===========================================================================\n  renderResult() {\n    return (\n      <Results\n        resultColors={this.state.resultColors}\n        resultLetters={this.state.resultLetters}\n        resultBriggs={this.state.resultBriggs}\n      />\n    )\n  }\n\n  // ===========================================================================\n  //                       renderizar esta pagina\n  // ===========================================================================\n  render() {\n    let resultBriggs = this.state.resultBriggs\n    if (resultBriggs) {\n      return this.renderResult()\n    }\n    return (\n      <Wrapper className=\"container\">\n        <QuestionCard>\n          <div className=\"corner\" />\n          <div className=\"corner\" />\n          <div className=\"corner\" />\n          <div className=\"corner\" />\n          {this.renderQuiz()}\n        </QuestionCard>\n      </Wrapper>\n    )\n  }\n}\n\nexport default Question\n","C:\\Proyectos\\test-personalidad\\src\\components\\Intro.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\utils\\Cards.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\utils\\Buttons.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\quiz\\Quiz.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\result\\Results.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\utils\\_media-queries.js",[],"C:\\Proyectos\\test-personalidad\\src\\api\\quizQuestions.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\quiz\\QuestionCount.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\quiz\\Question.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\quiz\\AnswerOption.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\result\\Letters.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\result\\Colors.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\result\\Briggs.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\utils\\ResultWrapper.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\definitions\\LettersDef.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\definitions\\BriggsDef.js",[],"C:\\Proyectos\\test-personalidad\\src\\components\\definitions\\ColorsDef.js",[],{"ruleId":"96","severity":1,"message":"97","line":9,"column":7,"nodeType":"98","messageId":"99","endLine":9,"endColumn":18},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"96","severity":1,"message":"104","line":123,"column":11,"nodeType":"98","messageId":"99","endLine":123,"endColumn":35},"no-unused-vars","'GlobalStyle' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["105"],"no-negated-in-lhs",["106"],"'answersCountValuesBriggs' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]